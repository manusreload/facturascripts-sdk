<?php

/**
 * Created by PhpStorm.
 * User: manus
 * Date: 21/4/16
 * Time: 20:06
 */
require_once __DIR__ . "/../vendor/autoload.php";

class sdk_new_project extends fs_controller
{
    public function __construct()
    {
        parent::__construct(__CLASS__, "+ Nuevo proyecto", "SDK", false, true, false);
        if(!$this->registrar_extension_css("estilos.css"))
        {
            $this->new_error_msg("No se ha podido registrar la extension");
        }
        
    }

    protected function get_sdk_info()
    {
        return array(
            'version' => '0.0.1'
        );
    }
    
    protected function private_core()
    {
        parent::private_core(); // TODO: Change the autogenerated stub
        if(isset($_POST['save']))
        {
            if(check_permissions("plugins/", true))
            {
                $name = $_POST['name'];
                $desc = $_POST['description'];
                $folder = "plugins/$name";

                mkdir($folder);

                if(file_put_contents($folder . "/description", $desc))
                {
                    $params = array();
                    $params['name'] = $name;
                    $params['description'] = $desc;
                    $params['user'] = $this->user;
                    $params['fecha'] = date("d-m-Y");
                    $params['fecha_hora'] = date("d-m-Y H:i:s");
                    $params['model'] = $_POST['model'];
                    $params['model_info'] = $this->get_model_info($_POST['model']);
                    $params['sdk'] = $this->get_sdk_info();
                    $params['fsc'] = $this;
                    if($this->generate_template($_POST['template'], $folder, $params))
                    {
                        $this->new_message("Se ha generado correcatamente");
                    }
                    else
                    {
                        $this->new_error_msg("Se ha producido un error al generar la plantilla.");
                    }
                }
                else
                {
                    $this->new_error_msg("No se puede crear archivos en el directorio $folder!");
                }

            }
            else
            {
                $this->new_error_msg("No se puede escribir en el directorio 'plugins/'");
            }
        }
    }
    
    public function get_model_info($table)
    {
        $items = $this->db->select("DESCRIBE $table");
        $model = $this->parseModel($table);
        $foreign = $this->db->select("select
    column_name as 'key',
    referenced_table_name as 'table',
    referenced_column_name as 'column',
    concat(referenced_table_name, '_', referenced_column_name) as target
from
    information_schema.key_column_usage
where
    referenced_table_name is not null
    and table_name = '{$table}'");

        return array(
            'items' => $items,
            'model' => $model,
            'foreign' => $foreign,
        );

    }

    function parseModel($model)
    {
        if(substr($model, strlen($model) - 1) == "s")
        {
            $tmp = substr($model, 0, strlen($model) - 1);
            if($this->validModel($tmp)) return $tmp;
            $tmp = substr($model, 0, strlen($model) - 2);
            if($this->validModel($tmp)) return $tmp;
        }
        return $model;
    }

    public function validModel($model)
    {
        require_model($model . ".php");
        return in_array($model . ".php", $GLOBALS['models']);
    }

    public function parseType($type)
    {
        $type = str_replace("varchar", "character varying", $type); // varchar(*) -> character varying(*)
        $type = preg_replace("/^double$/", "double precision", $type); // double -> double precision
        $type = preg_replace("/^int\(\d+\)/", "integer", $type); // int(*) -> integer
        $type = preg_replace("/tinyint\(1\)/", "boolean", $type); // tinyint(1) -> boolean
        $type = preg_replace("/^timestamp$/", "timestamp without time zone", $type); // timestamp -> timestamp without time zone

        return $type;
    }

    public function parseDefault($table, $item)
    {
        if(strtolower($item['Extra']) == "auto_increment")
        {
            return "nextval('{$table}_{$item['Field']}_seq'::regclass)";
        }
        return $item['Default'];
    }
    public function evalFunction($type, $text)
    {

        if(strpos($type, "tinyint") !== FALSE)
        {
            return '$this->str2bool($data[\'' . $text . '\'])';
        }

        if(strpos($type, "int") !== FALSE)
        {
            return '$this->intval($data[\'' . $text . '\'])';
        }
        if(strpos($type, "timestamp") !== FALSE)
        {
            return 'Date(\'d-m-Y H:i:s\', strtotime($data[\'' . $text . '\']))';
        }
        if(strpos($type, "double") !== FALSE)
        {
            return 'floatval($data[\'' . $text . '\'])';
        }

        return '$data[\'' . $text . '\']';

    }

    public function generate_template($template, $folder, $params)
    {
        $dir = __DIR__ . "/../templates/$template";
        $files = $this->recursive_list($dir);

        foreach ($files as $file)
        {
            $filename = $dir . $file;
            $path = $folder . $filename;
            if($this->getExtension($file) == ".twig")
            {
                $file = substr($file, 0, -5);
                $name = $this->render_string($file, $params);
                $content = $this->render_file($filename, $params);
                $path = $folder . $name;
                $dirname = dirname($path);
                if(!is_dir($dirname))
                {
                    mkdir($dirname, 0777, true);
                }
                if(file_put_contents($path, $content) === FALSE)
                {
                    return false;
                }

            }
            else
            {
                copy($filename, $path);
            }
        }
        return true;

    }
    public function getExtension($name)
    {
        return substr($name, strrpos($name, "."));
    }
    public function recursive_list($path, $relative = "", &$result = array())
    {
        $list = scandir($path);
        foreach ($list as $item)
        {
            if($item != "." && $item != "..")
            {
                $filename = $path . "/" . $item;
                $relative_path = $relative . "/" . $item;
                if(is_dir($filename))
                {
                    $this->recursive_list($filename, $relative_path,  $result);
                }
                else
                {
                    $result[] =  $relative_path;
                }
            }
        }
        return $result;
    }

    public function render_template($file, $params)
    {

    }
    public function render_string($string, $data)
    {
        $loader = new Twig_Loader_Array(array(
            'main' => $string
        ));
        $twig = new Twig_Environment($loader);
        return $twig->render('main', $data);
    }

    public function render_file($file, $data)
    {
        $loader = new Twig_Loader_Filesystem(dirname($file));
        $twig = new Twig_Environment($loader, array(
            'autoescape' => false,
        ));
        return $twig->render(basename($file), $data);
    }


    /**
     * Busca y registra la extensión para colocar el css en el head y
     * devuelve true en caso de éxito, false en cualquier otro caso.
     * Busca en orden inverso de prioridad.
     * @param $filename
     * @return bool
     */
    public function registrar_extension_css($filename)
    {
        $file = $this->get_css_location($filename);
        if(file_exists($file))
        {
            // Registrar la extension
            $name = preg_replace("#[^a-z0-9]#", "_", $filename);
            $fsext0 = new fs_extension(array(
                'name' => $name,
                'page_from' => $this->page->name,
                'page_to' => NULL,
                'type' => 'head',
                'text' => '<link href="' . $file .'" rel="stylesheet"></link>',
                'params' => ''
            ));
            return $fsext0->save();

        }
        return false;
    }

    public function generate_model($name)
    {

    }


}