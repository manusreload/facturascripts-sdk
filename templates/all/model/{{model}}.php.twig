<?php

/**
 * Creado por Factrurascripts SDK
 * User: {{ user.nick }}
 * Fecha: {{ fecha_hora }}
 */

/*
* Dependencies generated by the foreign keys
*/
{% for item in model_info.foreign %}
    {% if fsc.validModel(item.table) %}

require_model("{{ fsc.parseModel(item.table) }}.php");
    {% endif %}
{% endfor %}

{% set primary = false %}
{% for item in model_info.items %}
    {% if item.Key == 'PRI' and not primary %}
    {% set primary = item.Field %}

/* Primary key found: {{ item.Field }}*/
    {% endif %}
{% endfor %}

class {{ model }} extends fs_model
{

{% for item in model_info.items %}
    var ${{ item.Field }};
{% endfor %}

{% for item in model_info.foreign %}
    {% if fsc.validModel(fsc.parseModel(item.table)) %}
    /**
    * @var {{ fsc.parseModel(item.table) }} {{ fsc.parseModel(item.table) }}
    */
    var ${{ fsc.parseModel(item.table) }};
    {% endif %}
{% endfor %}


    public function __construct($data=FALSE)
    {
        $pluginname = str_replace(realpath(".") . "/", "",  realpath(__DIR__ . "/..") ) . "/";

        {% for item in model_info.foreign %}
            {% if fsc.validModel(fsc.parseModel(item.table)) %}
            $this->{{ fsc.parseModel(item.table) }} = new {{ fsc.parseModel(item.table) }}();
            {% endif %}
        {% endfor %}

        if($data)
        {
        {% for item in model_info.items %}

            $this->{{ item.Field }} = {{ fsc.evalFunction(item.Type, item.Field) }};
        {% endfor %}
        {% for item in model_info.foreign %}
            {% if fsc.validModel(fsc.parseModel(item.table)) %}$this->{{ fsc.parseModel(item.table) }} = $this->{{ fsc.parseModel(item.table) }}->get($data[\'{{ item.key }}']);{% endif %}
        {% endfor %}

        }

    }


    /**
    * Esta funci贸n es llamada al crear una tabla.
    * Permite insertar valores en la tabla.
    */
    protected function install()
    {
        return '';
    }

    /**
    * Esta funci贸n devuelve TRUE si los datos del objeto se encuentran
    * en la base de datos.
    */
    public function exists()
    {
{% if primary %}
        $value = $this->var2str($this->{{ primary }});
        return $this->db->select("SELECT * FROM {$this->table_name} WHERE {{ primary }} = $value");
{% else %}
        // Can't auto generate exists function, because the table does not have PRIMARY KEY
        return false;
{% endif %}

    }


    /**
    * Esta funci贸n sirve tanto para insertar como para actualizar
    * los datos del objeto en la base de datos.
    */
    public function save()
    {
        $sql = "";
        if($this->exists())
        {
{% if primary %}
            $value = $this->var2str($this->{{ primary }});
            if($this->{{ primary }})
            {
                $sql = "UPDATE {$this->table_name} SET
                {% for key,item in model_info.items %}
                    {{ key > 0?", ":"" }}
                    {{ item.Field }} = " . $this->var2str($this->{{ item.Field }}) . "
                {% endfor %}
                WHERE {{ primary }} = $value";
                return $this->db->exec($sql);
            }
{% endif %}
        }
        else
        {
            $sql = "INSERT INTO {$this->table_name} (
{% for key,item in model_info.items %}

                        {{ key > 0?", ":"" }}{{ item.Field }}{% endfor %}
            ) VALUES (
{% for key,item in model_info.items %}

                    {{ key > 0?", ":"" }}" . $this->var2str($this->{{ item.Field }}) . "{% endfor %}
            )";
            return $this->db->exec($sql);
        }

        return false;
    }


    /**
    * Esta funci贸n sirve para eliminar los datos del objeto de la base de datos
    */
    public function delete()
    {
        {% if primary %}
            $value = $this->var2str($this->{{ primary }});
            $sql = "DELETE FROM {$this->table_name} WHERE {{ primary }} = $value)";
            return $this->db->exec($sql);
        {% else %}
            // Can't auto generate delete function because the table does not have PRIMARY KEY
        {% endif %}
    }

{% if primary %}
    public function get($cod)
    {
        $cod = $this->var2str($cod);
        return $this->parse($this->db->select("SELECT * FROM {$this->table_name} WHERE {{ primary }} = $cod"));
    }
{% endif %}


    public function get_all_offset($offset=0, $limit=FS_ITEM_LIMIT)
    {
        return $this->parse($this->db->select_limit("SELECT * FROM {$this->table_name} {% if primary %}ORDER BY {{ primary }} DESC{% endif %}", $limit, $offset), true);
    }
    public function get_all()
    {
        return $this->parse($this->db->select("SELECT * FROM {$this->table_name} {% if primary %}ORDER BY {{ primary }} DESC{% endif %}"), true);
    }
    public function parse($items, $array = false)
    {
        if(count($items) > 1 || $array)
        {
            $list = array();
            foreach($items as $item)
            {
            $list[] = new {{ model }}($item);
            }
            return $list;
        }
        else if(count($items) == 1)
        {
            return new {{ model }}($items[0]);
        }
        return null;
    }

}